<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Sistem Tiket Gangguan - Integrasi Google Sheets</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <style>
    :root {
      --bg-color: #111;
      --text-color: #eee;
      --accent-color: #4ade80; /* Emerald */
      --google-color: #34a853;
      --danger-color: #ef4444;
      --pending-color: #facc15;
      --card-bg: #1e1e1e;
      --border: 1px solid rgba(255, 255, 255, 0.1);
      --radius: 10px;
      --shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
      --nav-height: 60px;
    }
    body.light-theme {
      --bg-color: #f7f7f7;
      --text-color: #111;
      --card-bg: #fff;
      --border: 1px solid rgba(0, 0, 0, 0.08);
      --shadow: 0 6px 16px rgba(0, 0, 0, 0.05);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: var(--bg-color);
      color: var(--text-color);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    header {
      padding: 0 24px;
      background: var(--card-bg);
      border-bottom: var(--border);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 100;
      height: var(--nav-height);
    }

    .logo-container {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    header h1 {
      font-size: 1.4rem;
      color: var(--accent-color);
    }

    .theme-toggle {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    nav {
      display: flex;
      gap: 16px;
      margin-left: 30px;
    }

    .nav-btn {
      background: transparent;
      border: none;
      color: var(--text-color);
      font-weight: 500;
      padding: 8px 16px;
      border-radius: var(--radius);
      cursor: pointer;
      transition: 0.2s;
      position: relative;
      opacity: 0.7;
    }

    .nav-btn.active {
      opacity: 1;
      background: rgba(255, 255, 255, 0.1);
    }

    .nav-btn:hover {
      opacity: 1;
    }

    .nav-btn i {
      margin-right: 8px;
    }

    .badge {
      position: absolute;
      top: -5px;
      right: -5px;
      background: var(--accent-color);
      color: #111;
      font-size: 0.7rem;
      font-weight: bold;
      border-radius: 10px;
      min-width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0 5px;
    }

    main {
      flex: 1;
      width: 100%;
      max-width: 1200px;
      margin: 24px auto;
      padding: 0 20px;
    }

    .page {
      display: none;
      animation: fadeIn 0.3s ease;
    }

    .page.active {
      display: block;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .card {
      background: var(--card-bg);
      border: var(--border);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 24px;
      margin-bottom: 32px;
    }

    h2 {
      margin-bottom: 16px;
      color: var(--accent-color);
      font-size: 1.3rem;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    h2 i {
      font-size: 1.1rem;
    }

    .btn {
      padding: 10px 18px;
      border: none;
      border-radius: var(--radius);
      cursor: pointer;
      font-weight: 500;
      transition: 0.2s;
      color: #111;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }

    .btn-sm {
      padding: 6px 12px;
      font-size: 0.85rem;
    }

    .btn-primary { background: var(--accent-color); }
    .btn-google { background: var(--google-color); color: white; }
    .btn-secondary { background: #64748b; color: #fff; }
    .btn-danger { background: var(--danger-color); color: #fff; }

    .btn:hover { opacity: 0.9; }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.9rem;
    }

    th, td {
      padding: 10px 12px;
      text-align: left;
      border-bottom: var(--border);
    }

    th { background: rgba(255, 255, 255, 0.05); }

    tr:hover { background: rgba(255, 255, 255, 0.04); }

    .status {
      padding: 4px 8px;
      border-radius: 6px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      display: inline-block;
    }

    .open       { background: var(--accent-color); color: #111; }
    .onprogress { background: var(--pending-color); color: #111; }
    .pending    { background: var(--danger-color); color: #fff; }
    .selesai    { background: #22d3ee; color: #111; }

    select, input, textarea {
      width: 100%;
      padding: 10px 12px;
      background: transparent;
      border: var(--border);
      border-radius: var(--radius);
      color: var(--text-color);
      margin-bottom: 12px;
    }

    label { font-size: 0.85rem; margin-bottom: 4px; display: block; }

    /* Simple modal */
    .modal {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.6);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      visibility: hidden;
      opacity: 0;
      transition: 0.3s;
    }
    .modal.show { visibility: visible; opacity: 1; }
    .modal-content {
      background: var(--card-bg);
      padding: 24px;
      border-radius: var(--radius);
      width: 90%;
      max-width: 500px;
      border: var(--border);
      max-height: 90vh;
      overflow-y: auto;
    }
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }
    .modal-header h3 { font-size: 1.1rem; }
    .close-btn {
      background: transparent;
      border: none;
      color: var(--text-color);
      font-size: 1.2rem;
      cursor: pointer;
    }

    .action-buttons {
      display: flex;
      gap: 8px;
    }

    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--card-bg);
      color: var(--text-color);
      padding: 12px 20px;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      z-index: 2000;
      transform: translateY(100px);
      opacity: 0;
      transition: 0.3s;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .toast.show {
      transform: translateY(0);
      opacity: 1;
    }

    .toast.success { border-left: 4px solid var(--accent-color); }
    .toast.error { border-left: 4px solid var(--danger-color); }
    .toast.warning { border-left: 4px solid var(--pending-color); }

    .empty-state {
      text-align: center;
      padding: 40px 20px;
      color: #94a3b8;
    }

    .empty-state i {
      font-size: 3rem;
      margin-bottom: 20px;
      opacity: 0.3;
    }

    .empty-state p {
      margin-top: 10px;
    }

    .mobile-actions {
      display: none;
    }
    
    /* Google Sheets Integration Section */
    .integration-card {
      background: var(--card-bg);
      border: var(--border);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 24px;
      margin-bottom: 32px;
      border-left: 4px solid var(--google-color);
    }
    
    .integration-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
      color: var(--google-color);
    }
    
    .form-group {
      margin-bottom: 16px;
    }
    
    .help-text {
      font-size: 0.8rem;
      color: #94a3b8;
      margin-top: 4px;
    }
    
    /* Search and Filter */
    .search-container {
      display: flex;
      gap: 12px;
      margin-bottom: 20px;
    }
    
    .search-container input {
      flex: 1;
      padding: 10px 15px;
      background: var(--card-bg);
      border: var(--border);
      border-radius: var(--radius);
      color: var(--text-color);
    }
    
    .filter-container {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    
    .filter-btn {
      padding: 8px 16px;
      border: var(--border);
      border-radius: var(--radius);
      background: transparent;
      color: var(--text-color);
      cursor: pointer;
      transition: 0.2s;
    }
    
    .filter-btn.active {
      background: var(--accent-color);
      color: #111;
      border-color: var(--accent-color);
    }
    
    .customer-tickets-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .customer-tickets-header h2 {
      margin-bottom: 0;
    }

    @media (max-width: 768px) {
      header {
        padding: 0 15px;
      }
      
      .logo-container h1 {
        font-size: 1.2rem;
      }
      
      nav {
        margin-left: 10px;
        gap: 8px;
      }
      
      .nav-btn span {
        display: none;
      }
      
      .nav-btn i {
        margin-right: 0;
        font-size: 1.2rem;
      }
      
      .badge {
        top: -2px;
        right: -2px;
      }
      
      .desktop-actions {
        display: none;
      }
      
      .mobile-actions {
        display: flex;
        gap: 8px;
        margin-top: 10px;
      }
      
      .card {
        padding: 16px;
      }
      
      table {
        font-size: 0.8rem;
      }
      
      th, td {
        padding: 8px 6px;
      }
      
      .action-buttons {
        flex-direction: column;
        gap: 5px;
      }
      
      .search-container {
        flex-direction: column;
      }
      
      .filter-container {
        gap: 6px;
      }
      
      .filter-btn {
        padding: 6px 12px;
        font-size: 0.8rem;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="logo-container">
      <i class="fas fa-truck fa-lg"></i>
      <h1>Sistem Tiket Pengantaran</h1>
    </div>
    
    <nav>
      <button class="nav-btn active" id="customersNavBtn">
        <i class="fas fa-users"></i>
        <span>Pelanggan</span>
        <span class="badge" id="customersBadge">3</span>
      </button>
      <button class="nav-btn" id="ticketsNavBtn">
        <i class="fas fa-ticket-alt"></i>
        <span>Tiket</span>
        <span class="badge" id="ticketsBadge">0</span>
      </button>
      <button class="nav-btn" id="googleNavBtn">
        <i class="fab fa-google"></i>
        <span>Google Sheets</span>
      </button>
    </nav>
    
    <div class="theme-toggle">
      <label class="switch">
        <input type="checkbox" id="themeSwitch" />
        <span class="slider round"></span>
      </label>
      <i class="fas fa-moon" id="themeIcon"></i>
    </div>
  </header>

  <main>
    <!-- HALAMAN PELANGGAN -->
    <section id="customersPage" class="page active">
      <div class="card">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
          <h2><i class="fas fa-users"></i> Daftar Pelanggan</h2>
          <button class="btn btn-primary" onclick="openCustomerModal(null)">
            <i class="fas fa-plus"></i> Pelanggan Baru
          </button>
        </div>
        
        <div class="search-container">
          <input type="text" id="customerSearch" placeholder="Cari pelanggan..." oninput="filterCustomers()" />
          <button class="btn btn-secondary" onclick="document.getElementById('customerSearch').value = ''; filterCustomers()">
            <i class="fas fa-times"></i> Reset
          </button>
        </div>
        
        <table id="customersTable">
          <thead>
            <tr>
              <th>Nama</th>
              <th>Alamat</th>
              <th>No. HP</th>
              <th>Aksi</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        
        <div id="noCustomers" class="empty-state" style="display: none;">
          <i class="fas fa-user-slash"></i>
          <h3>Tidak Ada Pelanggan</h3>
          <p>Tambahkan pelanggan baru untuk memulai</p>
          <button class="btn btn-primary" style="margin-top: 20px;" onclick="openCustomerModal(null)">
            <i class="fas fa-plus"></i> Tambah Pelanggan
          </button>
        </div>
      </div>
    </section>

    <!-- HALAMAN TIKET -->
    <section id="ticketsPage" class="page">
      <div class="card">
        <div class="customer-tickets-header" id="customerTicketsHeader" style="display: none;">
          <button class="btn btn-secondary btn-sm" onclick="showAllTickets()">
            <i class="fas fa-arrow-left"></i>
          </button>
          <h2 id="customerTicketsTitle"></h2>
        </div>
        
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
          <h2 id="ticketsTitle"><i class="fas fa-ticket-alt"></i> Daftar Tiket</h2>
          <div class="desktop-actions">
            <button class="btn btn-secondary" onclick="showPage('customersPage')">
              <i class="fas fa-arrow-left"></i> Kembali
            </button>
            <button class="btn btn-primary" onclick="openModal()" style="margin-left: 10px;">
              <i class="fas fa-plus"></i> Tiket Baru
            </button>
          </div>
        </div>
        
        <div class="mobile-actions">
          <button class="btn btn-secondary" onclick="showPage('customersPage')" style="flex: 1;">
            <i class="fas fa-arrow-left"></i> Kembali
          </button>
          <button class="btn btn-primary" onclick="openModal()" style="flex: 1; margin-left: 10px;">
            <i class="fas fa-plus"></i> Tiket Baru
          </button>
        </div>
        
        <div class="search-container">
          <input type="text" id="ticketSearch" placeholder="Cari tiket..." oninput="filterTickets()" />
          <button class="btn btn-secondary" onclick="document.getElementById('ticketSearch').value = ''; filterTickets()">
            <i class="fas fa-times"></i> Reset
          </button>
        </div>
        
        <div class="filter-container">
          <button class="filter-btn" data-status="all" onclick="filterTickets('all')">Semua</button>
          <button class="filter-btn" data-status="open" onclick="filterTickets('open')">Open</button>
          <button class="filter-btn" data-status="onprogress" onclick="filterTickets('onprogress')">On Progress</button>
          <button class="filter-btn" data-status="pending" onclick="filterTickets('pending')">Pending</button>
          <button class="filter-btn" data-status="selesai" onclick="filterTickets('selesai')">Selesai</button>
        </div>
        
        <table id="ticketsTable">
          <thead>
            <tr>
              <th>ID Tiket</th>
              <th>Status</th>
              <th>Judul</th>
              <th>Pelanggan</th>
              <th>Rencana</th>
              <th>Aksi</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        
        <div id="noTickets" class="empty-state" style="display: none;">
          <i class="fas fa-ticket-alt"></i>
          <h3>Tidak Ada Tiket</h3>
          <p>Buat tiket baru untuk memulai</p>
          <button class="btn btn-primary" style="margin-top: 20px;" onclick="openModal()">
            <i class="fas fa-plus"></i> Buat Tiket
          </button>
        </div>
      </div>
    </section>
    
    <!-- HALAMAN GOOGLE SHEETS -->
    <section id="googlePage" class="page">
      <div class="integration-card">
        <div class="integration-header">
          <i class="fab fa-google fa-2x"></i>
          <h2>Integrasi Google Sheets</h2>
        </div>
        
        <p>Kirim data tiket pengantaran ke Google Sheets untuk penyimpanan dan analisis lebih lanjut.</p>
        
        <div class="form-group">
          <label for="googleSheetUrl">URL Google Sheet:</label>
          <input type="text" id="googleSheetUrl" placeholder="https://docs.google.com/spreadsheets/d/..." />
          <div class="help-text">Salin URL spreadsheet Google Sheets Anda</div>
        </div>
        
        <div class="form-group">
          <label for="sheetName">Nama Sheet:</label>
          <input type="text" id="sheetName" value="Data Tiket" />
          <div class="help-text">Nama sheet dalam spreadsheet (default: Data Tiket)</div>
        </div>
        
        <div class="form-group">
          <label for="apiKey">Kunci API (Opsional):</label>
          <input type="text" id="apiKey" placeholder="Kunci API Anda" />
          <div class="help-text">Jika menggunakan Google Apps Script untuk keamanan</div>
        </div>
        
        <button class="btn btn-google" onclick="saveGoogleConfig()">
          <i class="fas fa-save"></i> Simpan Konfigurasi
        </button>
        
        <div style="margin-top: 30px; border-top: var(--border); padding-top: 20px;">
          <h3><i class="fas fa-cloud-upload-alt"></i> Kirim Data ke Google Sheets</h3>
          <p>Kirim semua data tiket ke Google Sheets yang telah dikonfigurasi.</p>
          
          <div class="action-buttons" style="margin-top: 15px;">
            <button class="btn btn-google" onclick="syncToGoogleSheets()" id="syncButton">
              <i class="fas fa-sync"></i> Sinkronkan Sekarang
            </button>
            <button class="btn btn-secondary" onclick="testGoogleConnection()">
              <i class="fas fa-plug"></i> Uji Koneksi
            </button>
          </div>
          
          <div id="syncStatus" style="margin-top: 15px; padding: 10px; border-radius: var(--radius); display: none;"></div>
        </div>
      </div>
      
      <div class="card">
        <h2><i class="fas fa-history"></i> Riwayat Sinkronisasi</h2>
        <table id="syncHistoryTable">
          <thead>
            <tr>
              <th>Tanggal</th>
              <th>Status</th>
              <th>Jumlah Tiket</th>
              <th>Detail</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <div id="noSyncHistory" class="empty-state" style="display: none;">
          <i class="fas fa-history"></i>
          <h3>Belum Ada Riwayat Sinkronisasi</h3>
          <p>Sinkronkan data Anda untuk memulai</p>
        </div>
      </div>
    </section>
  </main>

  <!-- MODAL PELANGGAN -->
  <div id="customerModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="customerModalTitle">Tambah Pelanggan Baru</h3>
        <button class="close-btn" onclick="closeCustomerModal()">&times;</button>
      </div>
      <form id="customerForm">
        <input type="hidden" id="customerId">
        <label>Nama Pelanggan</label>
        <input type="text" id="customerNama" required />
        
        <label>Alamat</label>
        <textarea id="customerAlamat" rows="2" required></textarea>
        
        <label>No. HP</label>
        <input type="tel" id="customerHp" required />
        
        <div style="display: flex; gap: 10px; margin-top: 20px;">
          <button type="button" class="btn btn-secondary" style="flex: 1;" onclick="closeCustomerModal()">Batal</button>
          <button type="submit" class="btn btn-primary" style="flex: 1;">Simpan</button>
        </div>
      </form>
    </div>
  </div>

  <!-- MODAL TIKET -->
  <div id="ticketModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Buat Tiket Pengantaran</h3>
        <button class="close-btn" onclick="closeModal()">&times;</button>
      </div>
      <form id="ticketForm">
        <label>Pilih Pelanggan</label>
        <select id="formCustomer" required>
          <option value="">-- Pilih Pelanggan --</option>
        </select>
        
        <label>Judul Tiket</label>
        <input type="text" id="formJudul" required />
        
        <label>Deskripsi</label>
        <textarea id="formDeskripsi" rows="3" required></textarea>
        
        <label>Waktu Pengerjaan</label>
        <input type="datetime-local" id="formWaktu" required />
        
        <label>Pelaksana</label>
        <input type="text" id="formPelaksana" required />
        
        <div style="display: flex; gap: 10px; margin-top: 20px;">
          <button type="button" class="btn btn-secondary" style="flex: 1;" onclick="closeModal()">Batal</button>
          <button type="submit" class="btn btn-primary" style="flex: 1;">Kirim Tiket</button>
        </div>
      </form>
    </div>
  </div>

  <!-- MODAL DETAIL TIKET -->
  <div id="detailModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Detail Tiket</h3>
        <button class="close-btn" onclick="closeDetailModal()">&times;</button>
      </div>
      <div id="ticketDetailContent" style="line-height: 1.8;"></div>
    </div>
  </div>

  <!-- TOAST NOTIFICATION -->
  <div id="toast" class="toast"></div>

  <script>
    /* ----------------------------- DATA ------------------------------ */
    let customers = JSON.parse(localStorage.getItem('delivery_customers')) || [
      { id: 1, nama: 'PT Jaya Abadi', alamat: 'Jl. Merdeka 123, Jakarta', hp: '081234567890' },
      { id: 2, nama: 'CV Sukses Makmur', alamat: 'Jl. Sudirman 45, Bandung', hp: '082211334455' },
      { id: 3, nama: 'Resto Enak', alamat: 'Jl. Pahlawan 7, Surabaya', hp: '081998877665' },
    ];

    let tickets = JSON.parse(localStorage.getItem('delivery_tickets')) || [];
    
    // Konfigurasi Google Sheets
    let googleConfig = JSON.parse(localStorage.getItem('google_sheets_config')) || {
      sheetUrl: '',
      sheetName: 'Data Tiket',
      apiKey: '',
      lastSync: null,
      syncHistory: []
    };
    
    // State untuk filter
    let currentFilter = 'all';
    let currentCustomerFilter = null;

    /* ----------------------------- INIT ------------------------------ */
    document.addEventListener('DOMContentLoaded', () => {
      renderCustomers();
      renderTickets();
      updateBadges();
      loadGoogleConfig();
      renderSyncHistory();
      setupFilterButtons();
      
      document.getElementById('ticketForm').addEventListener('submit', handleCreateTicket);
      document.getElementById('customerForm').addEventListener('submit', handleSaveCustomer);
      
      const themeSwitch = document.getElementById('themeSwitch');
      themeSwitch.addEventListener('change', toggleTheme);
      
      document.getElementById('customersNavBtn').addEventListener('click', () => showPage('customersPage'));
      document.getElementById('ticketsNavBtn').addEventListener('click', () => showPage('ticketsPage'));
      document.getElementById('googleNavBtn').addEventListener('click', () => showPage('googlePage'));
      
      // Set saved theme
      const savedTheme = localStorage.getItem('delivery_theme');
      if (savedTheme === 'light') {
        document.body.classList.add('light-theme');
        themeSwitch.checked = true;
        document.getElementById('themeIcon').className = 'fas fa-sun';
      }
      
      // Populate customer dropdown
      populateCustomerDropdown();
    });

    /* ------------------------- NAVIGASI HALAMAN ---------------------- */
    function showPage(pageId) {
      // Sembunyikan semua halaman
      document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
      });
      
      // Tampilkan halaman yang diminta
      document.getElementById(pageId).classList.add('active');
      
      // Update navigasi aktif
      document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      if (pageId === 'customersPage') {
        document.getElementById('customersNavBtn').classList.add('active');
        currentCustomerFilter = null;
        document.getElementById('customerTicketsHeader').style.display = 'none';
        document.getElementById('ticketsTitle').style.display = 'block';
      } else if (pageId === 'ticketsPage') {
        document.getElementById('ticketsNavBtn').classList.add('active');
      } else {
        document.getElementById('googleNavBtn').classList.add('active');
      }
    }

    /* ------------------------- TOGGLE THEME -------------------------- */
    function toggleTheme() {
      document.body.classList.toggle('light-theme');
      
      if (document.body.classList.contains('light-theme')) {
        localStorage.setItem('delivery_theme', 'light');
        document.getElementById('themeIcon').className = 'fas fa-sun';
      } else {
        localStorage.setItem('delivery_theme', 'dark');
        document.getElementById('themeIcon').className = 'fas fa-moon';
      }
    }

    /* ------------------------- RENDER CUSTOMERS ---------------------- */
    function renderCustomers() {
      const tbody = document.querySelector('#customersTable tbody');
      tbody.innerHTML = '';
      
      if (customers.length === 0) {
        document.getElementById('noCustomers').style.display = 'block';
        return;
      }
      
      document.getElementById('noCustomers').style.display = 'none';
      
      customers.forEach(c => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${c.nama}</td>
          <td>${c.alamat}</td>
          <td>${c.hp}</td>
          <td class="action-buttons">
            <button class="btn btn-primary btn-sm" onclick="openCustomerModal(${c.id})">
              <i class="fas fa-edit"></i> Edit
            </button>
            <button class="btn btn-danger btn-sm" onclick="deleteCustomer(${c.id})">
              <i class="fas fa-trash"></i> Hapus
            </button>
            <button class="btn btn-secondary btn-sm" onclick="viewCustomerTickets(${c.id})">
              <i class="fas fa-ticket-alt"></i> Tiket
            </button>
          </td>
        `;
        tbody.appendChild(tr);
      });
      
      updateBadges();
    }
    
    function filterCustomers() {
      const searchTerm = document.getElementById('customerSearch').value.toLowerCase();
      const rows = document.querySelectorAll('#customersTable tbody tr');
      
      rows.forEach(row => {
        const name = row.cells[0].textContent.toLowerCase();
        const address = row.cells[1].textContent.toLowerCase();
        const phone = row.cells[2].textContent.toLowerCase();
        
        if (name.includes(searchTerm) || address.includes(searchTerm) || phone.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    /* ------------------------- RENDER TICKETS ----------------------- */
    function renderTickets() {
      const tbody = document.querySelector('#ticketsTable tbody');
      tbody.innerHTML = '';
      
      let filteredTickets = tickets;
      
      // Filter by customer
      if (currentCustomerFilter) {
        filteredTickets = filteredTickets.filter(t => t.customerId === currentCustomerFilter);
      }
      
      // Filter by status
      if (currentFilter !== 'all') {
        filteredTickets = filteredTickets.filter(t => t.status === currentFilter);
      }
      
      // Search filter
      const searchTerm = document.getElementById('ticketSearch').value.toLowerCase();
      if (searchTerm) {
        filteredTickets = filteredTickets.filter(t => 
          t.judul.toLowerCase().includes(searchTerm) || 
          t.nama.toLowerCase().includes(searchTerm) ||
          t.pelaksana.toLowerCase().includes(searchTerm)
        );
      }
      
      if (filteredTickets.length === 0) {
        document.getElementById('noTickets').style.display = 'block';
      } else {
        document.getElementById('noTickets').style.display = 'none';
      }
      
      filteredTickets.forEach((t, idx) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${t.id}</td>
          <td><span class="status ${t.status}">${t.status}</span></td>
          <td>${t.judul}</td>
          <td>${t.nama}</td>
          <td>${new Date(t.waktu).toLocaleDateString()}</td>
          <td class="action-buttons">
            <button class="btn btn-primary btn-sm" onclick="viewTicketDetail(${idx})">
              <i class="fas fa-eye"></i> Detail
            </button>
            <select class="btn btn-sm" onchange="updateStatus(${idx}, this.value)" style="background: transparent; border: var(--border); color: var(--text-color);">
              <option value="open" ${t.status==='open'?'selected':''}>Open</option>
              <option value="onprogress" ${t.status==='onprogress'?'selected':''}>On Progress</option>
              <option value="pending" ${t.status==='pending'?'selected':''}>Pending</option>
              <option value="selesai" ${t.status==='selesai'?'selected':''}>Selesai</option>
            </select>
          </td>
        `;
        tbody.appendChild(tr);
      });
      
      updateBadges();
    }
    
    function filterTickets(status = currentFilter) {
      currentFilter = status;
      renderTickets();
      setupFilterButtons();
    }
    
    function filterTicketsByCustomer(customerId) {
      currentCustomerFilter = customerId;
      showPage('ticketsPage');
      renderTickets();
    }
    
    function setupFilterButtons() {
      document.querySelectorAll('.filter-btn').forEach(btn => {
        if (btn.dataset.status === currentFilter) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }
    
    function showAllTickets() {
      currentCustomerFilter = null;
      document.getElementById('customerTicketsHeader').style.display = 'none';
      document.getElementById('ticketsTitle').style.display = 'block';
      renderTickets();
    }
    
    function viewCustomerTickets(customerId) {
      const customer = customers.find(c => c.id === customerId);
      if (customer) {
        currentCustomerFilter = customerId;
        document.getElementById('customerTicketsHeader').style.display = 'flex';
        document.getElementById('customerTicketsTitle').textContent = `Tiket ${customer.nama}`;
        document.getElementById('ticketsTitle').style.display = 'none';
        showPage('ticketsPage');
        renderTickets();
      }
    }

    /* ------------------------ UPDATE BADGES ------------------------- */
    function updateBadges() {
      document.getElementById('customersBadge').textContent = customers.length;
      document.getElementById('ticketsBadge').textContent = tickets.length;
    }

    /* ------------------------ PELANGGAN MODAL ----------------------- */
    function openCustomerModal(customerId) {
      const modal = document.getElementById('customerModal');
      const form = document.getElementById('customerForm');
      
      if (customerId) {
        document.getElementById('customerModalTitle').textContent = 'Edit Pelanggan';
        const customer = customers.find(c => c.id === customerId);
        document.getElementById('customerId').value = customer.id;
        document.getElementById('customerNama').value = customer.nama;
        document.getElementById('customerAlamat').value = customer.alamat;
        document.getElementById('customerHp').value = customer.hp;
      } else {
        document.getElementById('customerModalTitle').textContent = 'Tambah Pelanggan Baru';
        form.reset();
      }
      
      modal.classList.add('show');
    }

    function closeCustomerModal() {
      document.getElementById('customerModal').classList.remove('show');
    }

    function handleSaveCustomer(e) {
      e.preventDefault();
      
      const id = document.getElementById('customerId').value;
      const nama = document.getElementById('customerNama').value;
      const alamat = document.getElementById('customerAlamat').value;
      const hp = document.getElementById('customerHp').value;
      
      if (id) {
        // Update existing customer
        const index = customers.findIndex(c => c.id == id);
        if (index !== -1) {
          customers[index] = { ...customers[index], nama, alamat, hp };
        }
      } else {
        // Add new customer
        const newId = customers.length > 0 ? Math.max(...customers.map(c => c.id)) + 1 : 1;
        customers.push({ id: newId, nama, alamat, hp });
      }
      
      saveData();
      renderCustomers();
      populateCustomerDropdown();
      closeCustomerModal();
      showToast('Pelanggan berhasil disimpan!', 'success');
    }

    function deleteCustomer(id) {
      if (!confirm('Apakah Anda yakin ingin menghapus pelanggan ini?')) return;
      
      const index = customers.findIndex(c => c.id === id);
      if (index !== -1) {
        customers.splice(index, 1);
        saveData();
        renderCustomers();
        populateCustomerDropdown();
        showToast('Pelanggan berhasil dihapus', 'success');
      }
    }

    /* ------------------------ TIKET MODAL --------------------------- */
    function openModal() {
      document.getElementById('ticketModal').classList.add('show');
    }

    function closeModal() {
      document.getElementById('ticketModal').classList.remove('show');
      document.getElementById('ticketForm').reset();
    }

    function populateCustomerDropdown() {
      const select = document.getElementById('formCustomer');
      select.innerHTML = '<option value="">-- Pilih Pelanggan --</option>';
      
      customers.forEach(c => {
        const option = document.createElement('option');
        option.value = c.id;
        option.textContent = c.nama;
        select.appendChild(option);
      });
    }

    /* ------------------------- CREATE TICKET ------------------------- */
    function handleCreateTicket(e) {
      e.preventDefault();
      
      const customerId = parseInt(document.getElementById('formCustomer').value);
      const customer = customers.find(c => c.id === customerId);
      
      if (!customer) {
        showToast('Pilih pelanggan terlebih dahulu', 'error');
        return;
      }

      const ticket = {
        id: 'T' + Date.now().toString().slice(-6),
        status: 'open',
        judul: document.getElementById('formJudul').value,
        deskripsi: document.getElementById('formDeskripsi').value,
        waktu: document.getElementById('formWaktu').value,
        pelaksana: document.getElementById('formPelaksana').value,
        nama: customer.nama,
        alamat: customer.alamat,
        hp: customer.hp,
        customerId: customer.id,
        createdAt: new Date().toISOString()
      };

      tickets.push(ticket);
      saveData();
      renderTickets();
      closeModal();
      showPage('ticketsPage');
      showToast('Tiket berhasil dibuat!', 'success');
      sendTelegram(ticket);
    }

    /* ------------------------- UPDATE STATUS ------------------------ */
    function updateStatus(index, newStatus) {
      const ticket = tickets[index];
      ticket.status = newStatus;
      saveData();
      renderTickets();
      showToast(`Status tiket diubah menjadi ${newStatus}`, 'success');
      sendTelegram(ticket);
    }

    /* ----------------------- VIEW TICKET DETAIL -------------------- */
    function viewTicketDetail(index) {
      const t = tickets[index];
      const modal = document.getElementById('detailModal');
      const content = document.getElementById('ticketDetailContent');
      
      const statusLabel = {
        open: 'Open',
        onprogress: 'On Progress',
        pending: 'Pending',
        selesai: 'Selesai'
      }[t.status] || t.status;
      
      content.innerHTML = `
        <div style="margin-bottom: 20px;">
          <strong>ID Tiket:</strong> ${t.id}<br>
          <strong>Status:</strong> <span class="status ${t.status}">${statusLabel}</span><br>
          <strong>Judul:</strong> ${t.judul}<br>
          <strong>Pelanggan:</strong> ${t.nama}<br>
          <strong>Alamat:</strong> ${t.alamat}<br>
          <strong>No. HP:</strong> ${t.hp}<br>
          <strong>Deskripsi:</strong> ${t.deskripsi}<br>
          <strong>Waktu Pengerjaan:</strong> ${new Date(t.waktu).toLocaleString()}<br>
          <strong>Pelaksana:</strong> ${t.pelaksana}
        </div>
        <button class="btn btn-danger" onclick="deleteTicket(${index})" style="width: 100%;">
          <i class="fas fa-trash"></i> Hapus Tiket
        </button>
      `;
      
      modal.classList.add('show');
    }

    function closeDetailModal() {
      document.getElementById('detailModal').classList.remove('show');
    }

    function deleteTicket(index) {
      if (!confirm('Apakah Anda yakin ingin menghapus tiket ini?')) return;
      
      tickets.splice(index, 1);
      saveData();
      renderTickets();
      closeDetailModal();
      showToast('Tiket berhasil dihapus', 'success');
    }

    /* --------------------- TELEGRAM NOTIFICATION -------------------- */
    async function sendTelegram(t) {
      const BOT_TOKEN = '8088239296:AAE_mZmHfr75sc8F2gcqfG4lnc0wEE-k08M';
      const CHAT_ID   = '-2764634390';
      const statusLabel = {
        open: 'OPEN',
        onprogress: 'ON PROGRESS',
        pending: 'PENDING',
        selesai: 'SELESAI',
      }[t.status] || t.status.toUpperCase();

      const message = `🚚 *TIKET PENGANTARAN*\n`+
        `ID Tiket  : *${t.id}*\n`+
        `Status    : *${statusLabel}*\n`+
        `Judul     : ${t.judul}\n`+
        `Pelanggan : ${t.nama}\n`+
        `Alamat    : ${t.alamat}\n`+
        `No. HP    : ${t.hp}\n`+
        `Rencana   : ${new Date(t.waktu).toLocaleString()}\n`+
        `Pelaksana : ${t.pelaksana}`;

      try {
        await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            chat_id: CHAT_ID, 
            text: message, 
            parse_mode: 'Markdown' 
          })
        });
        console.log('Telegram notification sent');
      } catch (error) {
        console.error('Failed to send Telegram notification:', error);
      }
    }

    /* ------------------------ TOAST MESSAGE ------------------------- */
    function showToast(message, type) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast ${type}`;
      
      const icon = type === 'success' ? 'fas fa-check-circle' : 
                  type === 'error' ? 'fas fa-exclamation-circle' : 'fas fa-info-circle';
      
      toast.innerHTML = `<i class="${icon}"></i> ${message}`;
      toast.classList.add('show');
      
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    /* ------------------------ SAVE DATA TO LOCALSTORAGE ------------- */
    function saveData() {
      localStorage.setItem('delivery_customers', JSON.stringify(customers));
      localStorage.setItem('delivery_tickets', JSON.stringify(tickets));
      updateBadges();
    }
    
    /* ----------------- GOOGLE SHEETS INTEGRATION ------------------- */
    function loadGoogleConfig() {
      document.getElementById('googleSheetUrl').value = googleConfig.sheetUrl;
      document.getElementById('sheetName').value = googleConfig.sheetName;
      document.getElementById('apiKey').value = googleConfig.apiKey;
    }
    
    function saveGoogleConfig() {
      googleConfig.sheetUrl = document.getElementById('googleSheetUrl').value;
      googleConfig.sheetName = document.getElementById('sheetName').value;
      googleConfig.apiKey = document.getElementById('apiKey').value;
      
      localStorage.setItem('google_sheets_config', JSON.stringify(googleConfig));
      showToast('Konfigurasi Google Sheets berhasil disimpan!', 'success');
    }
    
    function syncToGoogleSheets() {
      if (!googleConfig.sheetUrl) {
        showToast('Atur URL Google Sheets terlebih dahulu', 'error');
        return;
      }
      
      const syncButton = document.getElementById('syncButton');
      syncButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Mengirim...';
      syncButton.disabled = true;
      
      // Simulasi pengiriman data
      setTimeout(() => {
        const success = Math.random() > 0.2; // 80% chance of success
        
        if (success) {
          const syncEntry = {
            date: new Date().toLocaleString(),
            status: 'Berhasil',
            count: tickets.length,
            message: 'Data berhasil dikirim ke Google Sheets'
          };
          
          googleConfig.syncHistory.unshift(syncEntry);
          googleConfig.lastSync = new Date().toISOString();
          localStorage.setItem('google_sheets_config', JSON.stringify(googleConfig));
          
          renderSyncHistory();
          showToast(`Berhasil mengirim ${tickets.length} tiket ke Google Sheets`, 'success');
        } else {
          const syncEntry = {
            date: new Date().toLocaleString(),
            status: 'Gagal',
            count: 0,
            message: 'Kesalahan koneksi ke Google Sheets'
          };
          
          googleConfig.syncHistory.unshift(syncEntry);
          localStorage.setItem('google_sheets_config', JSON.stringify(googleConfig));
          
          renderSyncHistory();
          showToast('Gagal mengirim data ke Google Sheets', 'error');
        }
        
        syncButton.innerHTML = '<i class="fas fa-sync"></i> Sinkronkan Sekarang';
        syncButton.disabled = false;
      }, 2000);
    }
    
    function testGoogleConnection() {
      if (!googleConfig.sheetUrl) {
        showToast('Atur URL Google Sheets terlebih dahulu', 'error');
        return;
      }
      
      // Simulasi pengujian koneksi
      const statusElement = document.getElementById('syncStatus');
      statusElement.style.display = 'block';
      statusElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Menguji koneksi...';
      statusElement.className = '';
      
      setTimeout(() => {
        const success = Math.random() > 0.5; // 50% chance of success
        
        if (success) {
          statusElement.innerHTML = '<i class="fas fa-check-circle" style="color: var(--google-color);"></i> Koneksi berhasil! Konfigurasi valid.';
          statusElement.style.backgroundColor = 'rgba(52, 168, 83, 0.1)';
          statusElement.style.borderLeft = '4px solid var(--google-color)';
        } else {
          statusElement.innerHTML = '<i class="fas fa-times-circle" style="color: var(--danger-color);"></i> Gagal terhubung. Periksa URL dan kunci API.';
          statusElement.style.backgroundColor = 'rgba(239, 68, 68, 0.1)';
          statusElement.style.borderLeft = '4px solid var(--danger-color)';
        }
      }, 1500);
    }
    
    function renderSyncHistory() {
      const tbody = document.querySelector('#syncHistoryTable tbody');
      tbody.innerHTML = '';
      
      if (googleConfig.syncHistory.length === 0) {
        document.getElementById('noSyncHistory').style.display = 'block';
        return;
      }
      
      document.getElementById('noSyncHistory').style.display = 'none';
      
      googleConfig.syncHistory.forEach(entry => {
        const tr = document.createElement('tr');
        const statusClass = entry.status === 'Berhasil' ? 'success' : 'error';
        
        tr.innerHTML = `
          <td>${entry.date}</td>
          <td><span class="status ${statusClass}">${entry.status}</span></td>
          <td>${entry.count}</td>
          <td>${entry.message}</td>
        `;
        tbody.appendChild(tr);
      });
    }
  </script>
</body>
</html>
